name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_INCREMENTAL: 0

jobs:
  # Quick checks run first for fast feedback
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Quick compilation check
      run: cargo check --locked --workspace --all-features

  # Enhanced lint job with security tools
  lint:
    name: Enhanced Clippy & Security
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-enhanced-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-enhanced-
          ${{ runner.os }}-cargo-

    - name: Install enhanced security tools
      run: |
        cargo install cargo-deny --locked
        cargo install cargo-udeps --locked

    - name: Run enhanced clippy with complexity analysis
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Run dependency security and license checks
      run: cargo deny check advisories licenses

    - name: Check for unused dependencies
      run: cargo udeps --all-targets

  # Combined build and test job for efficiency
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Test (all features)"
            cmd: "cargo test --locked --all-features --workspace"
          - name: "Test (no features)"
            cmd: "cargo test --locked --no-default-features --workspace"
          - name: "Doc tests"
            cmd: "cargo test --locked --doc"
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build workspace
      run: |
        cargo build --locked --workspace --all-features
        cargo build --locked --workspace --no-default-features

    - name: ${{ matrix.name }}
      run: ${{ matrix.cmd }}

  # Release build verification
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    needs: quick-checks
    steps:
    - uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libdbus-1-dev pkg-config

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-
          ${{ runner.os }}-cargo-

    - name: Build all crates in release mode
      run: |
        cargo build --locked --release -p model
        cargo build --locked --release -p core
        cargo build --locked --release -p cli
        cargo build --locked --release --all

  # Security audit (optional, can be removed for speed)
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    - uses: rustsec/audit-check@v1.4.1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # Summary job to ensure all checks pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-checks, lint, build-and-test, release-build]
    steps:
    - name: CI Success
      run: echo "All CI checks passed successfully!"